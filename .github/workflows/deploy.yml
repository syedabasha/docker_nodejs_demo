# This is a basic workflow to help you get started with Actions

name: Deploy to ECR

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ main ]

jobs:
  
  build:
    
    name: Build Image
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

    - name: Git branch name
      id: git-branch-name
      uses: EthanSK/git-branch-name-action@v1

    - name: Echo the branch name
      id: directories
      run: echo "Branch name ${GIT_BRANCH_NAME}"
      echo "::set-output name=branchname::$(echo $GIT_BRANCH_NAME)"

    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials for Sandbox     
      uses: aws-actions/configure-aws-credentials@v1
      if: ${{ steps.directories.outputs.branchname == 'main' }}
      echo "branchname: ${{ steps.directories.outputs.branchname }}""      
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1 

    - name: Configure AWS credentials for Dev     
      uses: aws-actions/configure-aws-credentials@v1
      if: ${{ steps.directories.outputs.branchname == 'test' }}
      echo "branchname: ${{ steps.directories.outputs.branchname }}""       
      with:
        aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.DEV_AWS_SESSION_TOKEN }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: "726591409711.dkr.ecr.us-east-1.amazonaws.com"
        ECR_REPOSITORY: nodejs_demo_image
        IMAGE_TAG: V1.0
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG